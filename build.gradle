plugins {
    id "java-library"
    id "jacoco"
    id "com.diffplug.spotless" version "5.12.1"
    id "com.github.ben-manes.versions" version "0.38.0"
    id "pl.allegro.tech.build.axion-release" version "1.13.2"
    id "org.sonarqube" version "3.1.1"
    id "nebula.lint" version "16.23.0"
    id "com.adarshr.test-logger" version "3.0.0"
}

scmVersion {
    versionCreator "versionWithBranch"
    tag {
        prefix = "${name}"
    }
}

allprojects {
    apply plugin: "idea"
    apply plugin: "jacoco"
    apply plugin: "nebula.lint"
    apply plugin: 'com.adarshr.test-logger'

    group "com.github.michaelruocco.idv"
    version = rootProject.version

    sourceCompatibility = 15
    targetCompatibility = 15

    repositories {
        mavenCentral()
        jcenter()
    }

    jacoco {
        toolVersion = "0.8.6"
    }

    gradleLint {
        rules = ['all-dependency']
        alwaysRun = false
    }
}

subprojects {
    apply plugin: "java-library"
    apply plugin: "com.diffplug.spotless"

    ext {
        lombokVersion = "1.18.20"
        slf4jVersion = "1.7.30"
        projectReactorVersion = "3.4.5"

        junitVersion = "5.7.1"
        assertjVersion = "3.19.0"
        mockitoVersion = "3.9.0"
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        implementation "org.slf4j:slf4j-api:${slf4jVersion}"

        testRuntimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.assertj:assertj-core:${assertjVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        systemProperty "org.slf4j.simpleLogger.defaultLogLevel", "debug"
    }

    testlogger {
        theme 'mocha'
        showStandardStreams true
    }

    spotless {
        java {
            removeUnusedImports()
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()

            replace 'Not enough space after if', 'if(', 'if ('
            replaceRegex 'Too much space after if', 'if +\\(', 'if ('

            replace 'Not enough space after for', 'for(', 'for ('
            replaceRegex 'Too much space after for', 'for +\\(', 'for ('

            replace 'Not enough space after while', 'while(', 'while ('
            replaceRegex 'Too much space after while', 'while +\\(', 'while ('
        }
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

project.tasks["sonarqube"].dependsOn codeCoverageReport
sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "michaelruocco"
        property "sonar.projectKey", "michaelruocco_exercises"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/report.xml"
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
    subprojects.findAll { it.tasks.findByName("integrationTest") != null }.integrationTest
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}